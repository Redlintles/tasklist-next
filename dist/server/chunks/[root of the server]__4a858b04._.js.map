{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///home/jota/Documentos/node/Next%20js/tasklist-fullstack/src/utils/db.ts"],"sourcesContent":["import { Sequelize } from \"sequelize\";\nimport * as mysql2 from \"mysql2\";\n\nconst connection = new Sequelize(\n  process.env.DB_DATABASE || \"next_tasklist_api\",\n  process.env.DB_USERNAME || \"root\",\n  process.env.DB_PASSWORD || \"none\",\n  {\n    dialect: \"mysql\",\n    host: process.env.DB_HOST,\n    port: parseInt(process.env.DB_PORT || \"3306\"),\n    dialectModule: mysql2,\n  }\n);\n\nasync function initSequelize() {\n  try {\n    await connection.authenticate();\n    console.log(\"Conexão Estabelecida\");\n    await connection.sync({ alter: true });\n    console.log(\"Banco de dados Sincronizado!\");\n  } catch (error: unknown) {\n    console.log(`Erro ao sincronizar o banco de dados ${error}`);\n  }\n}\n\ninitSequelize();\nexport default connection;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,IAAI,4IAAA,CAAA,YAAS,CAC9B,QAAQ,GAAG,CAAC,WAAW,IAAI,qBAC3B,QAAQ,GAAG,CAAC,WAAW,IAAI,QAC3B,QAAQ,GAAG,CAAC,WAAW,IAAI,QAC3B;IACE,SAAS;IACT,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,eAAe;AACjB;AAGF,eAAe;IACb,IAAI;QACF,MAAM,WAAW,YAAY;QAC7B,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,IAAI,CAAC;YAAE,OAAO;QAAK;QACpC,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAgB;QACvB,QAAQ,GAAG,CAAC,CAAC,qCAAqC,EAAE,OAAO;IAC7D;AACF;AAEA;uCACe","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///home/jota/Documentos/node/Next%20js/tasklist-fullstack/src/models/Task.ts"],"sourcesContent":["import { DataTypes } from \"sequelize\";\nimport connection from \"@/utils/db\";\n\nconst Task = connection.define(\"Task\", {\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n  description: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n});\n\nexport default Task;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,OAAO,oHAAA,CAAA,UAAU,CAAC,MAAM,CAAC,QAAQ;IACrC,MAAM;QACJ,MAAM,4IAAA,CAAA,YAAS,CAAC,MAAM;QACtB,WAAW;IACb;IACA,aAAa;QACX,MAAM,4IAAA,CAAA,YAAS,CAAC,MAAM;QACtB,WAAW;IACb;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///home/jota/Documentos/node/Next%20js/tasklist-fullstack/src/app/api/task/%5Bid%5D/route.ts"],"sourcesContent":["import Task from \"@/models/Task\";\n\nexport async function GET(\n  _: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const { id } = await params;\n\n  const t = await Task.findByPk(id);\n\n  if (!t) {\n    return Response.json({ message: \"Tarefa não encontrada\" }, { status: 404 });\n  }\n\n  return Response.json(\n    { message: \"Tarefa encontrada com sucesso!\", task: t },\n    { status: 200 }\n  );\n}\n\nexport async function DELETE(\n  _: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const { id } = await params;\n\n  const t = await Task.findByPk(id);\n\n  const rows: number = await Task.destroy({ where: { id } });\n\n  if (rows === 0 && !t) {\n    return Response.json(\n      { message: \"Tarefa não encontrada!\" },\n      { status: 404 }\n    );\n  } else {\n    return Response.json(\n      { message: \"Tarefa excluída com sucesso!\", task: t },\n      { status: 200 }\n    );\n  }\n}\n\nexport async function PATCH(\n  req: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const { id } = await params;\n\n  const body = await req.json();\n\n  const toUpdate = await Task.findByPk(id);\n\n  if (!toUpdate) {\n    return Response.json({ message: \"Tarefa não encontrada\" }, { status: 404 });\n  }\n  const oldObj = JSON.parse(JSON.stringify(toUpdate.get()));\n\n  await toUpdate.set({\n    name: body.name || toUpdate.get(\"name\"),\n    description: body.description || toUpdate.get(\"description\"),\n  });\n\n  const savedObj = await toUpdate.save();\n\n  if (savedObj) {\n    return Response.json(\n      {\n        message: \"Tarefa Atualizada com sucesso\",\n        oldTask: oldObj,\n        newTask: toUpdate,\n      },\n      { status: 200 }\n    );\n  } else {\n    return Response.json(\n      {\n        message: \"Tarefa Não pôde ser atualizada, erro interno do servidor\",\n        task: toUpdate,\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAEO,eAAe,IACpB,CAAU,EACV,EAAE,MAAM,EAAuC;IAE/C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,MAAM,IAAI,MAAM,uHAAA,CAAA,UAAI,CAAC,QAAQ,CAAC;IAE9B,IAAI,CAAC,GAAG;QACN,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,OAAO,SAAS,IAAI,CAClB;QAAE,SAAS;QAAkC,MAAM;IAAE,GACrD;QAAE,QAAQ;IAAI;AAElB;AAEO,eAAe,OACpB,CAAU,EACV,EAAE,MAAM,EAAuC;IAE/C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,MAAM,IAAI,MAAM,uHAAA,CAAA,UAAI,CAAC,QAAQ,CAAC;IAE9B,MAAM,OAAe,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;QAAE,OAAO;YAAE;QAAG;IAAE;IAExD,IAAI,SAAS,KAAK,CAAC,GAAG;QACpB,OAAO,SAAS,IAAI,CAClB;YAAE,SAAS;QAAyB,GACpC;YAAE,QAAQ;QAAI;IAElB,OAAO;QACL,OAAO,SAAS,IAAI,CAClB;YAAE,SAAS;YAAgC,MAAM;QAAE,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,MACpB,GAAY,EACZ,EAAE,MAAM,EAAuC;IAE/C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAI,CAAC,QAAQ,CAAC;IAErC,IAAI,CAAC,UAAU;QACb,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IACA,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,SAAS,GAAG;IAErD,MAAM,SAAS,GAAG,CAAC;QACjB,MAAM,KAAK,IAAI,IAAI,SAAS,GAAG,CAAC;QAChC,aAAa,KAAK,WAAW,IAAI,SAAS,GAAG,CAAC;IAChD;IAEA,MAAM,WAAW,MAAM,SAAS,IAAI;IAEpC,IAAI,UAAU;QACZ,OAAO,SAAS,IAAI,CAClB;YACE,SAAS;YACT,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB,OAAO;QACL,OAAO,SAAS,IAAI,CAClB;YACE,SAAS;YACT,MAAM;QACR,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}